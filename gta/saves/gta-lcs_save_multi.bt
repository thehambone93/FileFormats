/*------------------------------------------------------------
 *--- 010 Editor v6.0.2 Binary Template ----------------------
 *
 *             File: gta-lcs_save_multi.bt
 *           Author: thehambone
 *          Purpose: Documenation of GTA LCS save file format
 *        Last edit: 30 July 2016
 *            Notes: PlayStation 2, iOS, and Android
 *----------------------------------------------------------*/

typedef struct RwV3D
{
    float fX, fY, fZ;
};

enum <int16> WEATHERTYPE
{
    WEATHER_SUNNY, WEATHER_CLOUDY, WEATHER_RAINY, WEATHER_FOGGY,
    WEATHER_EXTRA_SUNNY, WEATHER_HURRICANE, WEATHER_EXTRA_COLORS, WEATHER_SNOW,
};

enum <BYTE> FLAG
{
    OFF, ON
};

enum <DWORD> FLAG__
{
    OFF__, ON__
};

local int isPS2     = 0;
local int isAndroid = 0;
local int isIOS     = 0;

if (!determinePlatform()) {
    Printf("Unable to determine file origin!\n");
    return;
} else {
    Printf("IsPS2     = %d\n", isPS2);
    Printf("IsAndroid = %d\n", isAndroid);
    Printf("IsIOS     = %d\n", isIOS);
}

/** TODO:
 **     Find controller config in SimpleVars
 **     Check if prefsLanguage does anything on mobile
 **     Check weather type in list, see if a pattern can be determined
 **/


struct
{
    local int n = 0;
    struct
    {
        char    blockSig[4];
        uint32  blockSize;
    
        switch (n++) {
            case 0:  /* BLOCK 0: SIMPLEVARS */
                struct
                {
                    if (isAndroid || isIOS) {
                        DWORD       unknown;
                        DWORD       unknown <comment="8">;
                        DWORD       unknown;
                        wchar_t     saveName[8] <comment="GXT key">;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                    }
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       currLevel;
                    DWORD       currArea <comment="functionality unknown">;
                    DWORD       nPrefsLanguage <comment="functionality unknown">;
                    DWORD       nMillisecondsPerGameMinute <comment="length of 1 in-game minute">;
                    DWORD       nLastClockTick;
                    BYTE        nGameClockHours;
                    BYTE        nGameClockMinutes;
                    WORD        nGameClockSeconds <comment="unused?">;
                    DWORD       nTotalTimePlayedInMilliseconds;
                    FLOAT       fTimeScale <comment="appears to have no effect">;
                    FLOAT       fTimeStep <comment="appears to have no effect">;
                    FLOAT       fTimeStepNonClipped <comment="appears to have no effect">;
                    FLOAT       fFramesPerUpdate <comment="appears to have no effect">;
                    DWORD       nFrameCounter;
                    WEATHERTYPE nOldWeatherType <comment="appears to have no effect">;
                    WEATHERTYPE nNewWeatherType <comment="appears to have no effect">;
                    WEATHERTYPE nForcedWeatherType;
                    align(2);
                    DWORD       nWeatherTypeInList;
                    FLOAT       fWeatherInterpolationValue;
                    RwV3D       vCameraPosition;
                    if (isPS2) {
                        FLOAT       fPrefsVehicleCameraMode <comment="0 = bumper, 1 = near, 2 = normal, 3 = far, 4 = fixed, 5 = cinematic; not sure why this is a float">;
                        FLOAT       _fCameraRelated <comment="1">;
                        DWORD       _nCameraRelated <comment="0">;
                        DWORD       _nCameraRelated <comment="1">;
                        FLOAT       _fCameraRelated <comment="1">;
                        DWORD       nPrefsBrightness <comment="max=384, min=128; can go above or below">;
                        FLAG        nPrefsDisplayHud;
                        FLAG        nPrefsShowSubtitles;
                        BYTE        unknown;
                        BYTE        unknown;
                        DWORD       nRadarMode <comment="0 = map and blips; 1 = blips only; 2 = radar off">;
                        FLAG__      nBlurOn;
                        DWORD       unknown;
                        DWORD       unknown;
                        FLAG__      nPrefsWidescreen;
                        DWORD       nPrefsRadioVolume <comment="max=127, min=0">;
                        DWORD       nPrefsSFXVolume <comment="max=127,  min=0">;
                        BYTE        nPrefsRadioStation;
                        BYTE        nPrefsOutput <comment="audio related? appears unused">;
                        BYTE        unknown;
                        BYTE        unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        WORD        nControllerConfiguration;
                        WORD        unknown;
                        FLAG__      bPrefsDisableInvertLook;
                        FLAG        bPrefsVibration;
                        BYTE        unknown <comment="align?">;
                        BYTE        unknown <comment="align?">;
                        BYTE        unknown <comment="align?">;
                        FLAG        bHasPlayerCheated;
                        BYTE        unknown;
                        BYTE        unknown;
                        BYTE        unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        struct
                        {
                            DWORD       nSecond;
                            DWORD       nMinute;
                            DWORD       nHour;
                            DWORD       nDay;
                            DWORD       nMonth;
                            DWORD       nYear;
                        } timestamp;
                    } else {
                        FLOAT       fPrefsVehicleCameraMode <comment="0 = bumper, 1 = near, 2 = normal, 3 = far, 4 = fixed, 5 = cinematic; not sure why this is a float">;
                        FLOAT       _fCameraRelated <comment="1">;
                        DWORD       _nCameraRelated <comment="0">;
                        DWORD       _nCameraRelated <comment="1">;
                        FLOAT       _fCameraRelated <comment="1">;
                        DWORD       nPrefsBrightness <comment="max=700, min=180; can go above or below">;;
                        FLAG        nPrefsDisplayHud;
                        FLAG        nPrefsShowSubtitles;
                        align(2);
                        DWORD       nRadarMode;
                        FLAG        nBlurOn;
                        align(3);
                        DWORD       nPrefsMusicVolume;
                        DWORD       nPrefsSFXVolume;
                        BYTE        nPrefsRadioStation;
                        BYTE        nPrefsOutput <comment="audio related? appears to be unused">;
                        align(2);
                        struct
                        {
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                            DWORD    _unknown;
                        } _unknown <comment="possibly custom soundtrack info and leftovers">;
                        FLAG    bHasPlayerCheated <comment="ignored on mobile?">;
                        align(3);
                        DWORD   unknown <comment="align?">;
                        DWORD   unknown <comment="align?">;
                    }
                } block <name="SimpleVars">;
                break;
    
            case 1: /* BLOCK 1: SCRIPT */
                struct
                {
                    char    blockSig[4];
                    uint32  blockSize;
                    struct
                    {
                        uint32      nScriptVariableSpaceSize;
                        DWORD       aScriptVariables[nScriptVariableSpaceSize / sizeof(DWORD)] <optimize=false>;

                        uint32      blockSize;
                        struct
                        {
                            DWORD       _nOnAMissionFlag;
                            align(blockSize - 4);
                        } _scmMisc <comment="contains builing swaps, invisibility settings, and pools">;
                        BYTE        _unknown[244];
                        FLAG        bUsingAMultiScriptFile;
                        FLAG        _bPlayerHasMetDebbieHarry <comment="Didn't know Blondie was in the game!">;
                        align(2);
                        DWORD       nMainScriptSize;
                        DWORD       nLargestMissionScriptSize;
                        WORD        nNumberOfMissionScripts;
                        align(2);
                        WORD      nNumberOfExclusiveMissionScripts;
                        align(2);
                        struct
                        {
                            if (isPS2 || isAndroid) {
                                DWORD   pNext;
                                DWORD   pPrevious;
                                DWORD   nThreadID;
                                DWORD   unknown;
                            } else if (isIOS) {
                                DWORD   pNext;
                                DWORD   unknown;
                                DWORD   pPrevious;
                                DWORD   unknown;
                                DWORD   nThreadID;
                                DWORD   unknown;
                            }
                            char    szName[8];
                            DWORD   pCurrentInstruction;
                            DWORD   aReturnStack[16];
                            WORD    nReturnStackCount;
                            align(2);
                            DWORD   aLocalVariables[104];
                            DWORD   nTimerA;
                            DWORD   nTimerB;
                            DWORD   unknown;
                            FLAG    unknown;
                            FLAG    unknown;
                            FLAG    unknown;
                            FLAG    unknown;
                            DWORD   nWakeTimer;
                            FLAG    unknown;
                            FLAG    unknown;
                            FLAG    unknown;
                            FLAG    unknown;
                            DWORD   unknown;
                            if (isIOS) {
                                DWORD   unknown;
                            }
                        } aRunningScript[nNumberOfExclusiveMissionScripts] <optimize=false>;
                    } theScripts;
                } block <name="Script">;
                break;
    
            case 2: /* BLOCK 2: GARAGES */
                struct
                {
                    struct
                    {
                        DWORD       nNumGarages;
                        FLAG__      bBombsAreFree;
                        FLAG__      bRespraysAreFree;
                        DWORD       _nCarsCollected<comment="unused">;
                        DWORD       _nBankVansCollected<comment="unused">;
                        DWORD       _nPoliceCarsCollected<comment="unused">;
                        DWORD       nCarTypesCollected <format=binary, comment="love media cars">;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       nLastTimeHelpMessage <comment="time 'garage full' message last shown">;

                        /* Special Vehicle Properties
                           0x0001 = bullet-proof
                           0x0002 = fire-proof
                           0x0004 = explosion-proof
                           0x0008 = collision-proof
                           0x0010 = ??? (presumed melee-proof)
                           0x0020 = pop-proof
                           0x0040 = quad damage resistance (DD)
                           0x0080 = heavy
                           0x0100 = permanent color
                           0x0200 = timebomb fitted
                           0x0400 = tip-proof
                           0x8000 = ???
                        */
                        struct
                        {
                            uint32      nVehicleModelID;
                            RwV3D       vPosition;
                            float       rotation[3] <comment="euler angles I think">;
                            float       fHandlingMultiplier <comment="seems to only apply to bikes">;
                            DWORD       nSpecialProperties <format=binary>;
                            BYTE        bColorIDPrimary;
                            BYTE        bColorIDSecondary;
                            enum<BYTE>
                            {
                                HEAD_RADIO,
                                DOUBLE_CLEF_FM,
                                K_JAH,
                                RISE_FM,
                                LIPS_106,
                                RADIO_DEL_MUNDO,
                                MSX_98,
                                FLASHBACK_FM,
                                THE_LIBERTY_JAM,
                                LCFR,
                                RADIO_OFF,
                            } eRadioStation;
                            BYTE        bModelVariationA;
                            BYTE        bModelVariationB;
                            BYTE        bUnknown;
                            BYTE        bUnknown;
                            BYTE        bUnknown;
                        } aCarsInSafeHouse[48] <optimize=false>;
                    } stSaveGarageSlots;
                    // the rest is presaumably info about each script-controlled garages
                } block <name="Garages">;
                if (blockSize > sizeof(block)) {
                    align(blockSize - sizeof(block));
                }
                break;
    
            case 3:  /* BLOCK 3: PLAYER */
                struct
                {
                    if (isPS2) {
                        int32       nMoney;
                        DWORD       unknown;
                        BYTE        bUnknown;
                        BYTE        bUnknown;
                        BYTE        bUnknown;
                        FLOAT       fUnknown;
                        int32       nMoneyOnScreen;
                        DWORD       nHiddenPackagesFound <comment="changing this does nothing in-game">;
                        DWORD       unknown;
                        FLAG__      hasInfiniteSprint;
                        DWORD       unknown;
                        FLAG__      isFireproof;
                        ubyte       bMaxHealth;
                        ubyte       bMaxArmor;
                        FLAG__      getOutOfJailFree;
                        DWORD       unknown;
                        FLAG__      flagUnknown;
                        BYTE        bUnknown;
                        BYTE        bUnknown;
                        BYTE        bUnknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        RwV3D       unknown;
                        FLOAT       fUnknown;
                        FLOAT       fUnknown;
                        FLOAT       fUnknown;
                        FLOAT       fUnknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       unknown;
                        DWORD       _unknown[56];
                    } else {
                        DWORD       _unknown[32];
                        int32       nMoney;
                        DWORD       unknown;
                        int32       nMoneyOnScreen;
                        DWORD       nHiddenPackagesFound;
                        DWORD       unknown;
                        FLOAT       fUnknown;
                        DWORD       unknown;
                        ubyte       bMaxHealth;
                        ubyte       bMaxArmor;
                        WORD        wUnknown;
                        WORD        wUnknown <comment="fireproof or infinite sprint">;
                        WORD        wUnknown <comment="fireproof or infinite sprint">;
                        WORD        wUnknown;
                        WORD        wUnknown;
                    }
                } block <name="Player">;
                break;
    
            case 4:  /* BLOCK 4: STATS */
                struct
                {
                    DWORD       nPeopleYouveWasted;
                    DWORD       nPeopleWastedByOthers;
                    DWORD       nCarsExploded;
                    DWORD       nBoatsDestroyed;
                    DWORD       nTiresPoppedWithGunfire;
                    DWORD       nBulletsFired;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown <comment="COP wasted?">;
                    DWORD       unknown <comment="CIVMALE wasted?">;
                    DWORD       unknown <comment="CIVFEMALE wasted?">;
                    DWORD       nGANG1Wasted <comment="MAFIA LEONE">;
                    DWORD       nGANG2Wasted <comment="TRIAD">;
                    DWORD       nGANG3Wasted <comment="DIABLO">;
                    DWORD       nGANG4Wasted <comment="YAKUZA">;
                    DWORD       nGANG5Wasted <comment="YARDIE">;
                    DWORD       nGANG6Wasted <comment="COLUMBIAN">;
                    DWORD       nGANG7Wasted <comment="HOOD">;
                    DWORD       nGANG8Wasted <comment="MAFIA FORELLI">;
                    DWORD       nGANG9Wasted <comment="MAFIA SINDACCOS">;
                    DWORD       unknown <comment="EMERGENCY wasted?">;
                    DWORD       unknown <comment="FIREMAN wasted?">;
                    DWORD       nCriminalsWasted;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       nHelicoptersDestroyed;
                    FLOAT       fMissionPoints <comment="not sure why this is a float">;
                    FLOAT       fTotalMissionPoints <comment="not sure why this is a float">;
                    DWORD       nKgsOfExplosivesUsed;
                    DWORD       nBulletsThatHit;
                    DWORD       nCarsCrushed;
                    DWORD       nNumberOfHeadshots;
                    DWORD       nTotalNumberOfWantedStarsAttained;
                    DWORD       nTotalNumberOfWantedStarsEvaded;
                    DWORD       nTimesBusted;
                    DWORD       nHospitalVisits;
                    DWORD       nDaysPassedInGame;
                    DWORD       nNumberOfSaves;
                    DWORD       nSprayings;
                    FLOAT       fMaxInsaneJumpDist;
                    FLOAT       fMaxInsaneJumpHeight;
                    DWORD       nMaxInsaneJumpFlips;
                    DWORD       nMaxInsaneJumpRotation;
                    enum <DWORD>
                    {
                        NO_INSANE_STUNTS_COMPLETED,
                        INSANE_STUNT,
                        PERFECT_INSANE_STUNT,
                        DOUBLE_INSANE_STUNT,
                        PERFECT_DOUBLE_INSANE_STUNT,
                        TRIPLE_INSANE_STUNT,
                        PERFECT_TRIPLE_INSANE_STUNT,
                        QUDRUPLE_INSANE_STUNT,
                        PERFECT_QUADRUPLE_INSANE_STUNT,
                    } eBestInsaneStuntSoFar;
                    DWORD       unknown <comment="unique jumps completed?">;
                    DWORD       unknown <comment="total unique jumps?">;
                    DWORD       nMissionAttempts;
                    DWORD       nPassengersDroppedOff;
                    DWORD       nCashMadeInTaxi;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    DWORD       unknown;
                    DWORD       nPeopleSavedInAnAmbulance;
                    DWORD       nCriminalsKilledOnVigilanteMission;
                    DWORD       nTotalFiresExtinguished;
                    DWORD       unknown <comment="highest paramedic/vigilante/firefighter level">;
                    DWORD       unknown <comment="highest paramedic/vigilante/firefighter level">;
                    DWORD       unknown <comment="highest paramedic/vigilante/firefighter level">;
                    DWORD       nPhotosTaken;
                    DWORD       nRampagesPassed;
                    DWORD       nMostTimeLeftInKarmageddon <comment="seconds">;
                    DWORD       nMostKillsInRCTriadTakeDown;
                    DWORD       unknown <comment="total rampages?">;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    FLOAT       fUnknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    FLOAT       fUnknown;
                    DWORD       nLongestWheelieTime;
                    DWORD       nLongestStoppieTime;
                    DWORD       nLongest2WheelsTime;
                    FLOAT       fLongestWheelieDistance;
                    FLOAT       fLongestStoppieDistance;
                    FLOAT       fLongest2WheelsDistance;
                    FLOAT       fLongestFacePlantDistance;
                    FLOAT       fUnknown;
                    DWORD       nPropertyDestroyed;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    BYTE        bUnknown;
                    FLOAT       fUnknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    char        szLastMissionPassed[8] <comment="GXT key">;
                    DWORD       unknown;
                    DWORD       nCarsSold;
                    DWORD       nCashMadeSellingCars;
                    DWORD       nBikesSold;
                    DWORD       nCashMadeSellingBikes;
                    DWORD       unknown <comment="cars found for Love Media (or total)">;
                    DWORD       unknown <comment="cars found for Love Media (or total)">;
                    DWORD       nHighestSlashTVLevel;
                    DWORD       nTotalCashMadeOnSlashTV;
                    DWORD       nOpponentsKilledOnSlashTV;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       nCashMadeCollectingTrash;
                    DWORD       nHitmenWasted;
                    DWORD       nTotalAvengingAngelJusticeDishedOut;
                    DWORD       nNumberOfAvengingAngelMissionsPassed;
                    struct
                    {
                        DWORD   nPortland;
                        DWORD   nStauntonIsland;
                        DWORD   nShoresideVale;
                    } highestAvengingAngelLevel;
                    DWORD       nMostTimeLeftOnWongSideOfTheTrack <comment="seconds">;
                    DWORD       unknown;
                    DWORD       unknown <comment="most air achieved?">;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown <comment="outfit changes?">;
                    struct
                    {
                        struct
                        {
                            DWORD   nThrashinRC;
                            DWORD   nRaginRC;
                            DWORD   nChasinRC;
                        } fastestLap <comment="seconds">;
                        struct
                        {
                            DWORD   nThrashinRC;
                            DWORD   nRaginRC;
                            DWORD   nChasinRC;
                        } bestPosition;
                    } rcRaces;
                    struct
                    {
                        struct
                        {
                            DWORD   nLowRiderRumble;
                            DWORD   nDeimosDash;
                            DWORD   nWiCheetahRun;
                            DWORD   nRedLightRacing;
                            DWORD   nTorringtonTT;
                            DWORD   nGangstaGP;
                        } bestPosition;
                        struct
                        {
                            DWORD   nLowRiderRumble;
                            DWORD   nDeimosDash;
                            DWORD   nWiCheetahRun;
                            DWORD   nRedLightRacing;
                            DWORD   nTorringtonTT;
                            DWORD   nGangstaGP;
                        } fastestLap <comment="seconds">;
                        struct
                        {
                            DWORD   nLowRiderRumble;
                            DWORD   nDeimosDash;
                            DWORD   nWiCheetahRun;
                            DWORD   nRedLightRacing;
                            DWORD   nTorringtonTT;
                            DWORD   nGangstaGP;
                        } fastestTime <comment="seconds">;
                    } races;
                    struct
                    {
                        struct
                        {
                            DWORD   nCourse1;
                            DWORD   nCourse2;
                            DWORD   nCourse3;
                            DWORD   nCourse4;
                            DWORD   nCourse5;
                            DWORD   nCourse6;
                            DWORD   nCourse7;
                            DWORD   nCourse8;
                            DWORD   nCourse9;
                            DWORD   nCourse10;
                        } fastestLap <comment="seconds">;
                        struct
                        {
                            DWORD   nCourse1;
                            DWORD   nCourse2;
                            DWORD   nCourse3;
                            DWORD   nCourse4;
                            DWORD   nCourse5;
                            DWORD   nCourse6;
                            DWORD   nCourse7;
                            DWORD   nCourse8;
                            DWORD   nCourse9;
                            DWORD   nCourse10;
                        } fastestTime <comment="seconds">;
                    } bumpAndGrinds;
                    DWORD       _unknown[11] <comment="padding?">;
                } block <name="Stats">;
                break;
        }
    } blocks[5] <optimize=false, open=true>;
    if (isPS2) {
        struct
        {
            align(FileSize() - FTell() - 4);
        } padding;
        DWORD   checksum<read=checksum>;
    } else {
        // No checksum? File ends with 3 extra bytes (zeros)
        BYTE    bUnknown <comment="align?">;
        BYTE    bUnknown <comment="align?">;
        BYTE    bUnknown <comment="align?">;
    }
} lcsSave <name="GTA LCS Save", open=true>;
 
void align(int n)
{
    FSkip(n);
}

int determinePlatform()
{
    local int SIMP_SIZE_PS2              = 0xF8;
    local int RUNNINGSCRIPT_SIZE_ANDROID = 0x21C;
    local int RUNNINGSCRIPT_SIZE_IOS     = 0x228;

    local int mark = FTell();
    FSeek(0);

    // Determine platform by size of SIMP block
    local int simpSize = ReadInt(0x04);
    if (simpSize == SIMP_SIZE_PS2) {
        isPS2 = 1;
        FSeek(mark);
        return 1;
    }

    // Distinguish iOS and Android by size of RunningScript
    FSkip(simpSize + 0x0C);
    local int srptSize = ReadInt();
    local int srptOffset = FTell();

    FSkip(0x08);
    local int scrSize = ReadInt();

    FSkip(0x04);
    local int scriptVarSpaceSize = ReadInt();

    FSkip(scriptVarSpaceSize + 0x04);
    local int unknownBlockSize = ReadInt();

    FSkip(unknownBlockSize + 0x04 + 260); // Add 260 for empty structure after "unknown" block
    local int numRunningScripts = ReadInt();
    local int sizeOfRunningScript = (srptSize + srptOffset - FTell()) / numRunningScripts;

    if (sizeOfRunningScript == RUNNINGSCRIPT_SIZE_ANDROID) {
        isAndroid = 1;
        FSeek(mark);
        return 1;
    } else if (sizeOfRunningScript == RUNNINGSCRIPT_SIZE_IOS) {
        isIOS = 1;
        FSeek(mark);
        return 1;
    }
    
    FSeek(mark);
    return 0;
}

string checksum(int oldSum)
{
    local int checksumOffset = 0;
    local uint32 newSum;
    local string newSumString;

    checksumOffset = FileSize() - 4;

    newSum = Checksum(CHECKSUM_BYTE, 0, checksumOffset);
    if (newSum != oldSum) {
        WriteUInt(checksumOffset, newSum);
    }

    SPrintf(newSumString, "%d", (uint32) newSum);
    return newSumString;
}
