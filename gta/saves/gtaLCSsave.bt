/*------------------------------------------------------------
 *--- 010 Editor v6.0.2 Binary Template ----------------------
 *
 *             File: gtaLCSsave.bt
 *           Author: thehambone
 *          Purpose: Documenation of GTA LCS save file format
 *        Last edit: 20 December 2015
 *            Notes: iOS
 *----------------------------------------------------------*/

typedef struct RwV3D
{
    float x, y, z;
};

local int blockCount = countBlocks();
Printf("Block count: %d\n", blockCount);

local int n = 0;
struct
{
    char    blockSig[4];
    uint32  blockSize;

    switch (n++) {
        case 0: /* BLOCK 0: SIMPLEVARS */
            struct
            {
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                wchar_t     saveName[8] <comment="GXT key">;
                DWORD       unknown;
                DWORD       unknown <comment="current island?">;
                DWORD       unknown <comment="current island?">;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown <comment="global timer/weather timer?">;
                DWORD       unknown <comment="global timer/weather timer?">;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown <comment="repeated data">;
                DWORD       unknown;
                DWORD       unknown <comment="repeated data">;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown <comment="length of one in-game minute?">;
                DWORD       unknown;
                BYTE        unknown <comment="game hour?">;
                align(3);
                BYTE        unknown <comment="game minute?">;
                align(3);
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                FLOAT       fUnknown;
                RwV3D       unknownCoord <comment="camera pos/player pos?">;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       unknown;
                DWORD       _unknown[15] <optimize=false>;
            } block <name="SimpleVars">;
            break;

        case 1: /* BLOCK 1: SCRIPT */
            struct
            {
                char    blockSig[4];
                uint32  blockSize;
                struct
                {
                    uint32      scriptVariableSpaceSize;
                    DWORD       scriptVariables[scriptVariableSpaceSize / sizeof(DWORD)] <optimize=false>;

                    uint32      blockSize;
                    struct
                    {
                        DWORD       unknown <comment="onmission flag pointer?">;
                        // the rest is unknown
                        align(blockSize - 4);
                    } scmState;
                    // the rest is unknown
                    align(260);
                } scriptData;
                uint32      nRunningScripts;
                struct RunningScript
                {
                    DWORD   unknown[6] <optimize=false>;
                    char    name[8];
                    // the rest is unknown
                    align(520);
                } runningScripts[nRunningScripts] <optimize=false>;
            } block <name="Script">;
            break;

        case 2: /* BLOCK 2: GARAGES */
            struct
            {
                align(blockSize);
            } block <name="Garages">;
            break;

        case 3:  /* BLOCK 3: PLAYER */
            struct
            {
                align(128);
                DWORD   unknown <comment="player health?">;
                DWORD   unknown <comment="player armor?">;
                DWORD   unknown <comment="player armor?">;
            } block <name="Player">;
            break;

        case 4:  /* BLOCK 4: STATS */
            struct
            {
                align(blockSize);
            } block <name="Stats">;
            break;

        default:
            struct
            {
                align(blockSize);
            } block;
    }
    if (blockSize > sizeof(block)) {
        align(blockSize - sizeof(block));
    }
} blocks[blockCount] <optimize=false, open=true>;
 
void align(int n)
{
    FSkip(n);
}       

int countBlocks()
{
    local int mark = FTell();
    local int blockCount = 0;
    local int blockSize;
    
    FSeek(4);
    while (FTell() < FileSize()) {
        blockSize = ReadInt();
        FSkip(blockSize + 8);
        blockCount++;
    }
    FSeek(mark);

    return blockCount;
}
