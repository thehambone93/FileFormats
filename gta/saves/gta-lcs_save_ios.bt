/*------------------------------------------------------------
 *--- 010 Editor v6.0.2 Binary Template ----------------------
 *
 *             File: gta-lcs_save_ios.bt
 *           Author: thehambone
 *          Purpose: Documenation of GTA LCS save file format
 *        Last edit: 31 December 2015
 *            Notes: iOS
 *----------------------------------------------------------*/

/**********
 *
 * NOTE: ALL FINDINGS ARE UNTESTED
 *
 **********/

typedef struct RwV3D
{
    float fX, fY, fZ;
};

local int blockCount = countBlocks();
Printf("Block count: %d\n", blockCount);

struct
{
    local int n = 0;
    struct
    {
        char    blockSig[4];
        uint32  blockSize;
    
        switch (n++) {
            case 0: /* BLOCK 0: SIMPLEVARS */
                struct
                {
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    wchar_t     saveName[8] <comment="GXT key">;
                    DWORD       unknown;
                    DWORD       unknown <comment="current island?">;
                    DWORD       unknown <comment="current island?">;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown <comment="global timer/weather timer?">;
                    DWORD       unknown <comment="global timer/weather timer?">;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown <comment="repeated data">;
                    DWORD       unknown;
                    DWORD       unknown <comment="repeated data">;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown <comment="length of one in-game minute?">;
                    DWORD       unknown;
                    BYTE        unknown <comment="game hour?">;
                    align(3);
                    BYTE        unknown <comment="game minute?">;
                    align(3);
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    FLOAT       fUnknown;
                    RwV3D       unknownCoord <comment="camera pos/player pos?">;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       unknown;
                    DWORD       _unknown[15] <optimize=false>;
                } block <name="SimpleVars">;
                break;
    
            case 1: /* BLOCK 1: SCRIPT */
                struct
                {
                    char    blockSig[4];
                    uint32  blockSize;
                    struct
                    {
                        uint32      nScriptVariableSpaceSize;
                        DWORD       aScriptVariables[nScriptVariableSpaceSize / sizeof(DWORD)] <optimize=false,
                                            comment="player coords stored at offsets 8, 9, and 10; weapon ammo from 125 - 157; current weapon at 159; wanted level at 160; armor at 161; money at 162">;
    
                        uint32      blockSize;
                        struct
                        {
                            DWORD       unknown <comment="onmission flag pointer?">;
                            // the rest is unknown, possibly ContactInfo and BaseBrief
                            align(blockSize - 4);
                        } scmState <comment="not sure what to call this struct">;
                        // the rest is unknown, possibly BuilndingSwap and InvisibilitySetting
                        align(260);
                    } scriptData;
                    uint32      nRunningScripts;
                    struct
                    {
                        DWORD   unknown[6] <optimize=false>;
                        char    name[8];
                        // the rest is unknown, (locals are in there somewhere, along with ip and other flags)
                        align(520);
                    } aRunningScript[nRunningScripts] <optimize=false>;
                } block <name="Script">;
                break;
    
            case 2: /* BLOCK 2: GARAGES */
                struct
                {
                    struct
                    {
                        uint32      nGarageSlots <comment="18, but isn't the max 12? (4 at each garage)">;
                        DWORD       unknown[10];
                        struct
                        {
                            uint32      vehicleModelID;
                            RwV3D       vPosition;
                            float       rotation[3] <comment="euler angles I think">;
                            DWORD       unknown;
                            DWORD       unknown <format=binary, comment="immunities?">;
                            BYTE        bColorIDPrimary;
                            BYTE        bColorIDSecondary;
                            BYTE        bUnknown <comment="radio station?">;
                            BYTE        bUnknown;
                            BYTE        bUnknown;
                            BYTE        bUnknown;
                            BYTE        bUnknown;
                            BYTE        bUnknown;
                        } aSaveGarageSlot[nGarageSlots] <optimize=false>;
                    } stSaveGarageSlots;
                    align(1320);
                    DWORD       unknown;
                    // the rest is presaumably info about each script-controlled garages
                } block <name="Garages">;
                break;
    
            case 3:  /* BLOCK 3: PLAYER */
                struct
                {
                    align(128);
                    DWORD   unknown <comment="player health?">;
                    DWORD   unknown <comment="player armor?">;
                    DWORD   unknown <comment="player armor?">;
                } block <name="Player">;
                break;
    
            case 4:  /* BLOCK 4: STATS */
                struct
                {
                    align(blockSize);
                } block <name="Stats", comment="undocumented">;
                break;
    
            default:
                struct
                {
                    align(blockSize);
                } block <name="Unknown Block">;
        }
        if (blockSize > sizeof(block)) {
            align(blockSize - sizeof(block));
        }
    } blocks[blockCount] <optimize=false, open=true>;
    // No checksum? File ends with 3 extra bytes (zeros)
    BYTE    bUnknown <comment="align?">;
    BYTE    bUnknown <comment="align?">;
    BYTE    bUnknown <comment="align?">;
} lcsSave <name="GTA LCS iOS Save", open=true>;
 
void align(int n)
{
    FSkip(n);
}       

int countBlocks()
{
    local int mark = FTell();
    local int blockCount = 0;
    local int blockSize;
    
    FSeek(4);
    while (FTell() < FileSize()) {
        blockSize = ReadInt();
        FSkip(blockSize + 8);
        blockCount++;
    }
    FSeek(mark);

    return blockCount;
}
